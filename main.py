# -*- coding: utf-8 -*-


import disnake as discord
from disnake import channel
from disnake.ext import commands
#from discord.ext import ipc
import random
from config import settings 
import asyncio
import asyncio
import logging
from urllib import request
import json
import requests
import sqlite3
file_name = 'economy.db'
import os
import sys
import random
import asyncio
import json
import asyncio
import random
import datetime
import os
#import youtube_dl
import json
import lvls
import motor.motor_asyncio

cluster = motor.motor_asyncio.AsyncIOMotorClient('mongodb://mongo:4tuf0leqvNuG020Vb7WK@containers-us-west-29.railway.app:5998')
economy = cluster['ecodb']['users']
database = cluster['Logs']
shop = cluster['Phones']['shop']
collection = database['channellog']
phonesdata = cluster['Phones']
phonecol = phonesdata['Users']
store = phonesdata['Apps']
from StringProgressBar import progressBar
#youtube_dl.utils.bug_reports_message = lambda: ""
from disnake.enums import ButtonStyle
ytdl_format_options = {
    "format": "bestaudio/best",
    "outtmpl": "%(extractor)s-%(id)s-%(title)s.%(ext)s",
    "restrictfilenames": True,
    "noplaylist": True,
    "nocheckcertificate": True,
    "ignoreerrors": False,
    "logtostderr": False,
    "quiet": True,
    "no_warnings": True,
    "default_search": "auto",
    "source_address": "0.0.0.0",  # Bind to ipv4 since ipv6 addresses cause issues at certain times
}
ffmpeg_options = {"options": "-vn"}

#ytdl = youtube_dl.YoutubeDL(ytdl_format_options)


#class YTDLSource(discord.PCMVolumeTransformer):
#    def __init__(self, source, *, data, volume=0.5):
#        super().__init__(source, volume)

#        self.data = data
#
#        self.title = data.get("title")
#        self.url = data.get("url")
#
#    @classmethod
#    async def from_url(cls, url, *, loop=None, stream=False):
#        loop = loop or asyncio.get_event_loop()
#        data = await loop.run_in_executor(
#            None, lambda: ytdl.extract_info(url, download=not stream)
#        )
#
#        if "entries" in data:
#            # Takes the first item from a playlist
#           data = data["entries"][0]
#
#        filename = data["url"] if stream else ytdl.prepare_filename(data)
#        return cls(discord.FFmpegPCMAudio(filename, **ffmpeg_options), data=data)#

intents = discord.Intents.all()
intents.members = True
bot = commands.Bot(command_prefix = settings['prefix'], intents=intents, pm_help=True, case_insensitive=True)#, intents = discord.Intents.default())
bot.remove_command('help')
client = bot
#@bot.command()
async def python(ctx, *, code):
    code = code
    try:
        if code == 'open("config.py").read()':
            await ctx.send('–•–µ—Ä—É—à–∫–∏ —Ç–µ–±–µ –∞ –Ω–µ —Ç–æ–∫–µ–Ω!')
            
            return
        elif code == 'exit(1)' or code == 'exit()' or code == 'exit(2)':
            await ctx.send('–≠–π–π–π –Ω–µ –≤—ã–∫–ª—é—á–∞–π –±–æ—Ç–∞!')
            return
        result = exec(code)
        
        await ctx.send(str(result))
    except Exception as error:
        await ctx.send(str(error))


@bot.command()
@commands.has_permissions(administrator=True)
async def setlogchannel(ctx, channel : discord.TextChannel):
    guildid = ctx.guild.id
    channelid = channel.id
    data = {'guild': guildid, 'channel': channelid}
    result = collection.insert_one(data).inserted_id
    await ctx.send(embed=discord.Embed(title='<:checkmark:946826044583858266>', description='–£—Å–ø–µ—à–Ω–æ!'))
    return
#@bot.event
#async def on_member_update(before, after):
    #a = after.guild.id
    #b = collection.find_one({'guild': a})
    #if not b:
        #await ctx.send('–û—à–∏–±–∫–∞ –Ω–µ –±—ã–ª —É–∫–∞–∑–∞–Ω –∫–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥–æ–≤!')
        #return
    #channel = bot.get_channel(b['channel'])
    #print(before)
    #print(after)
    #bef = before.roles
    #aft = after.roles
    #print(aft)
    
    #await channel.send(embed=discord.Embed(title='–õ–æ–≥–∏ - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —é–∑–µ—Ä–∞',description=f'–°–∞–º–∞—è –≤—ã—Å–æ–∫–∞—è —Ä–æ–ª—å –¥–æ \n <@&{before.top_role.id}> \n –ø–æ—Å–ª–µ: \n <@&{after.top_role.id}> \n '))
@client.event
async def on_guild_channel_create(channel):
    a = channel.guild.id
    b = collection.find_one({'guild': a})
    if not b:
        return
    channel = bot.get_channel(b['channel'])
    await channel.send(embed=discord.Embed(title='–ù–æ–≤—ã–π –∫–∞–Ω–∞–ª', description='–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞: ' + str(channel.name) + '\n –ö–∞—Ç–µ–≥–æ—Ä–∏—è ' + str(channel.category) + '\n –ê–π–¥–∏: ' + str(channel.id) + '\n –ö–æ–≥–¥–∞ —Å–æ–∑–¥–∞–Ω ' + str(channel.created_at)))#–≤—ã–≤–µ–¥–µ—Ç –∏–º—è –∫–∞–Ω–∞–ª–∞
    print('Channel category: ', channel.category)#–≤—ã–≤–µ–¥–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≥–¥–µ –æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è
    print('Channel id: ', channel.id)#–≤—ã–≤–µ–¥–µ—Ç –∞–π–¥–∏ –∫–∞–Ω–∞–ª–∞
    print('Channel created at', channel.created_at)#–≤—ã–≤–µ–¥–µ—Ç —á–∞—Å –∏ –¥–∞—Ç—É –∫–æ–≥–¥–∞ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω
@bot.event
async def on_message(message):
    author = message.author
    if not author.bot:
        await lvls.addxp(message, author)
        await bot.process_commands(message)
    if author == client.user:
        return
@bot.command()
async def addmoney(ctx, col:int):
    id = ctx.author.id
    if id == 858307410757681172:
        await economy.update_one({"member_id": id, "guild_id": ctx.guild.id}, {'$inc': {'balance': col}})
        await ctx.send('–£—Å–ø–µ—à–Ω–æ!')
    else:
        await ctx.send('–í—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞!')
        return
class ChoicePhoneList(discord.ui.Select):
    def __init__(self, owner_id, ctx):
        # Set the options that will be presented inside the dropdown
        self.owner_id=owner_id
        self.ctx = ctx
        self.owner = self.ctx.author
        options = [
            discord.SelectOption(
                label="MI - 5000", description="—Ç–µ–ª–µ—Ñ–æ–Ω –∫—Å–∞–æ–º–∏"#, emoji="üõ†"
            ),
            discord.SelectOption(
                label="Samsung - 10000", description="—Å–æ–º—Å—É–Ω–≥"#, emoji="üòÑ"
            ),
            discord.SelectOption(
                label="Google Pixel - 14000", description="–∫–ª—É—Ç–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω –∞—Ç –ì—É–ª—å"#, emoji="üí∏"
            ),
            discord.SelectOption(
                label='DIGMA - 2400', description='–¥–∏–≥–º–æ—á–∫–∞ –¥–µ—à–µ–≤–æ–µ –≥–æ–≤–Ω–æ'#, emoji='üî¥'
            ),
            discord.SelectOption(
                label='OPPO - 3400', description='–¢–µ–ª–µ—Ñ–æ–Ω –æ–ø–ø–æ –ø–æ–π–¥–µ—Ç –∫—Å–∞—Ç–∏ —É —Å–æ–∑–¥–∞—Ç–µ–ª—è —Ç–∞–∫–æ–π!'
            ),
        ]

        # The placeholder is what will be shown when no option is chosen
        # The min and max values indicate we can only pick one of the three options
        # The options parameter defines the dropdown options. We defined this above
        super().__init__(
            placeholder="–í—ã–±–µ—Ä–µ—Ç–µ –ø—É–Ω–∫—Ç...",
            min_values=1,
            max_values=1,
            options=options,
        )

    async def callback(self, interaction: discord.MessageInteraction):
        # Use the interaction object to send a response message containing
        # the user's favourite colour or choice. The self object refers to the
        # Select object, and the values attribute gets a list of the user's
        # selected options. We only want the first one.
        a = await function_new_phone(self.values[0], self.owner_id, self.owner)
        await interaction.response.send_message(a, ephemeral=True)
        
class ChoicePhoneINIT(discord.ui.View):
    def __init__(self, owner_id, ctx):
        super().__init__(timeout=None)

        # Adds the dropdown to our view object.
        
        self.ctx = ctx
        self.add_item(ChoicePhoneList(owner_id, self.ctx))
    async def interaction_check(self, interaction):
        if interaction.user == self.ctx.author:
            return True
        else:
            await interaction.response.send_message('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞!', ephemeral=True)
            return False

async def function_new_phone(brand, id, owner):
    phone = await phonecol.find_one({'owner': id})
    if not phone:
        if brand == "MI":

            data = {'owner': id, 'os': 'MIUI', 'brand': 'Xiaomi', 'recovery':'Mi Recovery v3.0', 'root':'No installed', 'magisk':'No installed', 'basic':'No installed', 'loader':'No unlock', 'apps':[], 'amount':5000}
            balance = await economy.find_one({"member_id": id, "guild_id": owner.guild.id})

        
            await economy.update_one({"member_id": id, "guild_id": owner.guild.id}, {"$inc": {"balance": -data['amount']}})
            result = await phonecol.insert_one(data)
            print(result)
            return '–ì–æ—Ç–æ–≤–æ! –í—ã —Ç–µ–ø–µ—Ä—å  –∏–º–µ–µ—Ç–µ ' + data['brand'] + ' —Å ' + data['os']
        
        elif brand == 'Samsung':
            data = {'owner': id, 'os':'OneUI', 'brand':'Samsung', 'recovery':'—Å—Ç–æ–∫–æ–≤—ã–π', 'root':'No installed', 'magisk':'No installed', 'basic':'No installed', 'loader':'No unlock', 'apps':[], 'amount':10000}
            balance = await economy.find_one({"member_id": id, "guild_id": owner.guild.id})

        
            await economy.update_one({"member_id": id, "guild_id": owner.guild.id}, {"$inc": {"balance": -data['amount']}})
            result = await phonecol.insert_one(data)
            print(result)
            return '–ì–æ—Ç–æ–≤–æ! –í—ã —Ç–µ–ø–µ—Ä—å  –∏–º–µ–µ—Ç–µ ' + data['brand'] + ' —Å ' + data['os']
        elif brand == 'DIGMA':
            data = {'owner': id, 'os':'Android Go!', 'brand':'Digma', 'recovery':'—Å—Ç–æ–∫–æ–≤—ã–π', 'root':'No installed', 'magisk':'No installed', 'basic':'No installed', 'loader':'No unlock', 'apps':[], 'amount':2400}
            balance = await economy.find_one({"member_id": id, "guild_id": owner.guild.id})

        
            await economy.update_one({"member_id": id, "guild_id": owner.guild.id}, {"$inc": {"balance": -data['amount']}})
            result = await phonecol.insert_one(data)
            print(result)
            return '–ì–æ—Ç–æ–≤–æ! –í—ã —Ç–µ–ø–µ—Ä—å  –∏–º–µ–µ—Ç–µ ' + data['brand'] + ' —Å ' + data['os']
        elif brand == 'Google Pixel':
            data = {'owner': id, 'os':'AOSP', 'brand':'Google Pixel', 'recovery':'—Å—Ç–æ–∫–æ–≤—ã–π', 'root':'No installed', 'magisk':'No installed', 'basic':'No installed', 'loader':'No unlock', 'apps':[], 'amount':14000}
            balance = await economy.find_one({"member_id": id, "guild_id": owner.guild.id})

        
            await economy.update_one({"member_id": id, "guild_id": owner.guild.id}, {"$inc": {"balance": -data['amount']}})
            result = await phonecol.insert_one(data)
            print(result)
            return '–ì–æ—Ç–æ–≤–æ! –í—ã —Ç–µ–ø–µ—Ä—å  –∏–º–µ–µ—Ç–µ ' + data['brand'] + ' —Å ' + data['os']
        elif brand == 'OPPO':
            
            data = {'owner': id, 'os':'ColorOS', 'brand':'OPPO', 'recovery':'—Å—Ç–æ–∫–æ–≤—ã–π', 'root':'No installed', 'magisk':'No installed', 'basic':'No installed', 'loader':'No unlock', 'apps':[], 'amount':3400}
            
            balance = await economy.find_one({"member_id": id, "guild_id": owner.guild.id})
            if balance['balance'] < data['amount']:
                pass
            
            await economy.update_one({"member_id": id, "guild_id": owner.guild.id}, {"$inc": {"balance": -data['amount']}})


            result = await phonecol.insert_one(data)
            print(result)
            return '–ì–æ—Ç–æ–≤–æ! –í—ã —Ç–µ–ø–µ—Ä—å  –∏–º–µ–µ—Ç–µ ' + data['brand'] + ' —Å ' + data['os']
    elif phone:
        print(phone)
        return '–û—à–∏–±–∫–∞ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–º–µ—Ç—å –±–æ–ª—å—à–µ 1 —Ç–µ–ª–µ—Ñ–æ–Ω–∞'
    else:
        return '–û–®–ò–ë–ö–ê –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏'
async def progress(msg):
    await msg.edit(content='.')
    await asyncio.sleep(5)
    await msg.edit(content='..')
    await asyncio.sleep(5)
    await msg.edit(content='...')
    await asyncio.sleep(5)
    await msg.edit(content='....')
    await asyncio.sleep(5)
    await msg.edit(content='.....')
    await asyncio.sleep(5)
    await msg.edit(content='......')
    await asyncio.sleep(5)
    await msg.edit(content='.......')
    await asyncio.sleep(5)
    await msg.edit(content='........')
    await asyncio.sleep(5)
    await msg.edit(content='.........')
    await asyncio.sleep(5)
    await msg.edit(content='..........')
    await asyncio.sleep(5)
    await msg.edit(content='...........')
    await asyncio.sleep(5)
    await msg.edit(content='............')
    await asyncio.sleep(5)
    await msg.edit(content='.............')
@bot.command()
async def appstore(ctx, dia=None, app=None, desc=None):
    if not dia:
        await ctx.send('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –≤–∏–±–µ—Ä–µ—Ç–µ –ø—É–Ω–∫—Ç \n install \n apps \n search')
    if dia == 'apps':
        id = ctx.author.id
        phone = await phonecol.find_one({'owner': id})
        apps = phone['apps']
        await ctx.send('–í–∞—à–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:')
        await ctx.send('\n'.join(apps))

    elif dia == 'install':
        if not app:
            await ctx.send('–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!')
            return
        else:
            id = ctx.author.id
            phone = await phonecol.find_one({'owner': id})
            apps = phone['apps']
            app = app
            appinfo = await store.find_one({'name':app})
            if not appinfo:
                await ctx.send('[ERROR 404] appstore.com –≤—ã–¥–∞–µ—Ç –æ—à–∏–±–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å —Å—Ç–∞—Ç—É—Å–æ–º 404')
                return

            apps.append(appinfo['name'])
            print(apps)
            phonecol.update_one({
            'owner': id
            },{
                '$set': {
                'apps': apps
            }
            }, upsert=False)
            await ctx.send('–í—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!')
    elif dia == 'search':
        if not app:
            await ctx.send('–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!')
            return
        else:
            appinfo = await store.find_one({'name':app})
            if not appinfo:
                await ctx.send('[ERROR 404] appstore.com –≤—ã–¥–∞–µ—Ç –æ—à–∏–±–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å —Å—Ç–∞—Ç—É—Å–æ–º 404')
                return
            await ctx.send(f'–ù–∞–∑–≤–∞–Ω–∏–µ:' + appinfo['name'] + '\n–û–ø–∏—Å–∞–Ω–∏–µ: ' + appinfo['description'])
    elif dia == 'upload': 
        if not app:
            await ctx.send('–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ!')
            return
        if not desc:
            await ctx.send('–æ—Ç—Å—É—Å—Ç–≤—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ!')
            return
        else:
            await ctx.send('–î–æ–±–∞–≤–ª—è–µ–º...')
            data = {'name':app,'description':desc}
            result = await store.insert_one(data)
            await ctx.send(f'[–£—Å–ø–µ—à–Ω–æ <:checkmark:946826044583858266> !] –í—ã –∑–∞–ª–∏–ª–∏ ' + data['app'])
    else:
        await ctx.send('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!')
@bot.command()
async def myphone(ctx, diia=None, diiasdiia=None, diiia=None):
    id = ctx.message.author.id
    phone = await phonecol.find_one({'owner': id})
    if not phone:
        await ctx.send('–£ –≤–∞—Å –æ—Ç—Å—É—Å—Ç–≤—É–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω!')
        return
    phone_name = phone['brand']
    phone_os = phone['os']
    phone_root = phone['root']
    phone_magisk = phone['magisk']
    phone_basicmagisk = phone['basic']
    phone_unlock = phone['loader']
    phone_id = phone['_id']
    phone_recovery = phone['recovery']
    if not diia:
        await ctx.send(embed=discord.Embed(title=f'–í–∞—à {phone_name}', description=f'–ò–ù–§–û–†–ú–ê–¶–ò–Ø \nA–π–¥–∏: {phone_id}\n –ò–º–µ–µ—Ç –ø—Ä–æ—à–∏–≤–∫—É {phone_os} \n –ò –∏–º–µ–µ—Ç —Ä–µ–∫–æ–≤–µ—Ä–∏ {phone_recovery}\n –°–û–°–¢–û–Ø–ù–ò–ï \n–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—É—Ç–∞ {phone_root} \n–°–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞–≥–∏—Å–∫–∞ {phone_magisk}\n –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ {phone_unlock}\n–ë–∞–∑–æ–≤—ã–π –∫–æ–º–ø–ª–µ–∫—Ç –º–æ–¥—É–ª–µ–π –º–∞–≥–∏—Å–∫ {phone_basicmagisk}'))
    if diia == 'install':
        if not diiasdiia:
            await ctx.send('–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å!\n–°–ø–∏—Å–æ–∫: \n TWRP \n custom <CUSTOM NAME> \n Magisk \n Root \n BasicPackMagisk \n Unlock')
        if diiasdiia == 'custom':
            if not diiia:
                await ctx.send('–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∫–∞–∫–æ–π –∫–∞—Å—Ç–æ–º –Ω–∞–¥–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å! –∫—Å–∞—Ç–∏ –≤–æ—Ç —Å–ø–∏—Å–æ–∫: \n MIUI \n OneUI \n AndroidGo \n AOSP \n ColorOS')
            
            elif phone_unlock == 'No unlock':
                await ctx.send('–£ –≤–∞—Å –Ω–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∑–∞–≥—Ä—É–∑—á–∏–∫!')
                return
            
            elif diiia == 'MIUI':
                a = random.randint(0, 100)
                brick = a>=75
                msg = await ctx.send('–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–∫–∏–Ω—Ç–µ—Å—å –Ω–∞ —Å–ø–∏–Ω–∫—É –ø–æ–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∫–∞—Å—Ç–æ–º –Ω–∞ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω! (~60 —Å–µ–∫—É–Ω–¥)')
                msd = await ctx.send('d')
                await progress(msd)
                if brick == True:
                    ctx.send('–£–ø—Å....  —É –≤–∞—Å –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—Ä–æ—à–∏—Ç—å –æ–Ω —Å—Ç–∞–ª –∫–∏—Ä–ø–∏—á–µ–º –∏ –≤—ã –µ–≥–æ –≤–∏–∫–∏–Ω—É–ª–∏!')
                    phonecol.delete_one({'_id':phone_id})
                    return
                else:
                    pass
                    
                await msd.edit(content='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–ø—É—Å–∫—É ~5 —Å–µ–∫—É–Ω–¥')
                phonecol.update_one({
                'owner': id
                },{
                    '$set': {
                    'os': 'MIUI'
                }
                }, upsert=False)
                await msg.delete()
                await msd.edit(content='–ó–∞–≤–µ—Ä—à–µ–Ω–æ!')
            elif diiia == 'AndroidGo':
                a = random.randint(0, 100)
                brick = a>=75
                msg = await ctx.send('–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–∫–∏–Ω—Ç–µ—Å—å –Ω–∞ —Å–ø–∏–Ω–∫—É –ø–æ–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∫–∞—Å—Ç–æ–º –Ω–∞ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω! (~60 —Å–µ–∫—É–Ω–¥)')
                msd = await ctx.send('d')
                await progress(msd)
                if brick == True:
                    ctx.send('–£–ø—Å....  —É –≤–∞—Å –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—Ä–æ—à–∏—Ç—å –æ–Ω —Å—Ç–∞–ª –∫–∏—Ä–ø–∏—á–µ–º –∏ –≤—ã –µ–≥–æ –≤–∏–∫–∏–Ω—É–ª–∏!')
                    phonecol.delete_one({'_id':phone_id})
                    return
                elif brick == False:
                    pass
                await msd.edit(content='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–ø—É—Å–∫—É ~5 —Å–µ–∫—É–Ω–¥')
                phonecol.update_one({
                'owner': id
                },{
                    '$set': {
                    'os': 'Android Go!'
                }
                }, upsert=False)
                await msg.delete()
                await msd.edit(content='–ó–∞–≤–µ—Ä—à–µ–Ω–æ!')
            elif diiia == 'OneUI':
                a = random.randint(0, 100)
                brick = a>=75
                msg = await ctx.send('–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–∫–∏–Ω—Ç–µ—Å—å –Ω–∞ —Å–ø–∏–Ω–∫—É –ø–æ–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∫–∞—Å—Ç–æ–º –Ω–∞ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω! (~60 —Å–µ–∫—É–Ω–¥)')
                msd = await ctx.send('d')
                await progress(msd)
                if brick == True:
                    ctx.send('–£–ø—Å....  —É –≤–∞—Å –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—Ä–æ—à–∏—Ç—å –æ–Ω —Å—Ç–∞–ª –∫–∏—Ä–ø–∏—á–µ–º –∏ –≤—ã –µ–≥–æ –≤–∏–∫–∏–Ω—É–ª–∏!')
                    phonecol.delete_one({'_id':phone_id})
                    return
                elif brick == False:
                    pass
                await msd.edit(content='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–ø—É—Å–∫—É ~5 —Å–µ–∫—É–Ω–¥')
                phonecol.update_one({
                'owner': id
                },{
                    '$set': {
                    'os': 'OneUI'
                }
                }, upsert=False)
                await msg.delete()
                await msd.edit(content='–ó–∞–≤–µ—Ä—à–µ–Ω–æ!')
            elif diiia == 'ColorOS':
                a = random.randint(0, 100)
                brick = a>=75
                msg = await ctx.send('–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–∫–∏–Ω—Ç–µ—Å—å –Ω–∞ —Å–ø–∏–Ω–∫—É –ø–æ–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∫–∞—Å—Ç–æ–º –Ω–∞ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω! (~60 —Å–µ–∫—É–Ω–¥)')
                msd = await ctx.send('d')
                await progress(msd)
                if brick == True:
                    ctx.send('–£–ø—Å....  —É –≤–∞—Å –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—Ä–æ—à–∏—Ç—å –æ–Ω —Å—Ç–∞–ª –∫–∏—Ä–ø–∏—á–µ–º –∏ –≤—ã –µ–≥–æ –≤–∏–∫–∏–Ω—É–ª–∏!')
                    phonecol.delete_one({'_id':phone_id})
                    return
                elif brick == False:
                    pass
                await msd.edit(content='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–ø—É—Å–∫—É ~5 —Å–µ–∫—É–Ω–¥')
                phonecol.update_one({
                'owner': id
                },{
                    '$set': {
                    'os': 'ColorOS'
                }
                }, upsert=False)
                await msg.delete()
                await msd.edit(content='–ó–∞–≤–µ—Ä—à–µ–Ω–æ!')
            elif diiia == 'AOSP':
                a = random.randint(0, 100)
                brick = a>=75
                msg = await ctx.send('–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–∫–∏–Ω—Ç–µ—Å—å –Ω–∞ —Å–ø–∏–Ω–∫—É –ø–æ–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∫–∞—Å—Ç–æ–º –Ω–∞ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω! (~60 —Å–µ–∫—É–Ω–¥)')
                msd = await ctx.send('d')
                await progress(msd)
                if brick == True:
                    ctx.send('–£–ø—Å....  —É –≤–∞—Å –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—Ä–æ—à–∏—Ç—å –æ–Ω —Å—Ç–∞–ª –∫–∏—Ä–ø–∏—á–µ–º –∏ –≤—ã –µ–≥–æ –≤–∏–∫–∏–Ω—É–ª–∏!')
                    phonecol.delete_one({'_id':phone_id})
                    return
                elif brick == False:
                    pass
                await msd.edit(content='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–ø—É—Å–∫—É ~5 —Å–µ–∫—É–Ω–¥')
                phonecol.update_one({
                'owner': id
                },{
                    '$set': {
                    'os': 'AOSP'
                }
                }, upsert=False)
                await msg.delete()
                await msd.edit(content='–ó–∞–≤–µ—Ä—à–µ–Ω–æ!')
            else:
                await ctx.send('–ö–∞—Å—Ç–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω!')
                return 


        if diiasdiia == 'Unlock':
            if phone_unlock == 'Unlocked':
                await ctx.send('403 Forbidden Bot : –í—ã —É–∂–µ –∏–º–µ–µ—Ç–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫!')
                return
            else:
                msg = await ctx.send('–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞....')
                await asyncio.sleep(1)
                await msg.edit(content='.')
                await asyncio.sleep(1)
                await msg.edit(content='..')
                await asyncio.sleep(1)
                await msg.edit(content='...')
                await asyncio.sleep(1)
                await msg.delete()
                phonecol.update_one({
                'owner': id
                },{
                    '$set': {
                    'loader': 'Unlocked'
                }
                }, upsert=False)
                await ctx.send('–ì–æ—Ç–æ–≤–æ!')
        if diiasdiia == 'Magisk':
            if phone_magisk == 'Installed':
                await ctx.send('–£ –≤–∞—Å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä—É—Ç!')
                return
            else:
                msg = await ctx.send('–£—Å—Ç–∞–Ω–æ–≤–∫–∞....')
                await asyncio.sleep(1)
                await msg.edit(content='.')
                await asyncio.sleep(1)
                await msg.edit(content='..')
                await asyncio.sleep(1)
                await msg.edit(content='...')
                await asyncio.sleep(1)
                await msg.delete()
                phonecol.update_one({
                'owner': id
                },{
                    '$set': {
                    'magisk': 'Installed'
                }
                }, upsert=False)
                await ctx.send('–ì–æ—Ç–æ–≤–æ!')
        if diiasdiia == 'Root':
            if phone_root == 'Installed':
                await ctx.send('–£ –≤–∞—Å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä—É—Ç!')
                return
            else:
                msg = await ctx.send('–£—Å—Ç–∞–Ω–æ–≤–∫–∞....')
                await asyncio.sleep(1)
                await msg.edit(content='.')
                await asyncio.sleep(1)
                await msg.edit(content='..')
                await asyncio.sleep(1)
                await msg.edit(content='...')
                await asyncio.sleep(1)
                await msg.delete()
                phonecol.update_one({
                'owner': id
                },{
                    '$set': {
                    'root': 'Installed'
                }
                }, upsert=False)
                await ctx.send('–ì–æ—Ç–æ–≤–æ!')
        if diiasdiia == 'BasicPackMagisk':
            if phone_basicmagisk == 'Installed':
                await ctx.send('–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –∑–∞—á–µ–º —Ç–µ–±–µ —ç—Ç–æ —Ç—ã –µ–≥–æ —É–∂–µ –ø–æ—Å—Ç–∞–≤–∏–ª...')
                return
            elif phone_root == 'Not installed': 
                await ctx.send('–í—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Ä—É—Ç!')
                return
            else:
                msg = await ctx.send('–£—Å—Ç–∞–Ω–æ–≤–∫–∞.....')
                
                await asyncio.sleep(1)
                await msg.edit(content='.')
                await asyncio.sleep(1)
                await msg.edit(content='..')
                await asyncio.sleep(1)
                await msg.edit(content='...')
                    

                await msg.delete()
                phonecol.update_one({
                'owner': id
                },{
                    '$set': {
                    'basic': 'Installed'
                }
                }, upsert=False)
                msg = await ctx.send('–ì–æ—Ç–æ–≤–æ!')
                await asyncio.sleep(5)
                await msg.delete()
        if diiasdiia == 'TWRP':
            if phone_unlock == 'No unlock':
                await ctx.reply('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –¢–í–†–ü –±–µ–∑ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞!')
                return
            elif phone_unlock == 'Unlocked':
                if phone_recovery == 'TWRP':
                    await ctx.send('–£ –≤–∞—Å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¢–í–†–ü')
                    return
                msg = await ctx.send('–£—Å—Ç–∞–Ω–æ–≤–∫–∞.....')
                
                await asyncio.sleep(1)
                await msg.edit(content='.')
                await asyncio.sleep(1)
                await msg.edit(content='..')
                await asyncio.sleep(1)
                await msg.edit(content='...')
                    

                await msg.delete()
                phonecol.update_one({
                'owner': id
                },{
                    '$set': {
                    'recovery': 'TWRP'
                }
                }, upsert=False)
                msg = await ctx.send('–ì–æ—Ç–æ–≤–æ!')
                await asyncio.sleep(5)
                await msg.delete()
            else:
                await ctx.send('500 Bot is have error!')
@bot.command()
async def new_phone(ctx):
    owner = ctx.message.author
    owner_id = owner.id
    await ctx.send('–í—ã–±–µ—Ä–µ—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–∏–∂–µ!', view=ChoicePhoneINIT(owner_id, ctx))
@bot.slash_command(name='rank', description='–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—à —É—Ä–æ–≤–µ–Ω—å')
async def rank(inter):
    
    author = inter.author
    authorid = author.id
    information = await lvls.open_user(authorid)
    level = str(information['lvls'])
    dolevel = information['dolevel']
    total = 1000
    bardata = progressBar.filledBar(total, dolevel, size=10)
    print(author)
    print(bardata[0])
    print(bardata[1])
    author = str(author)
    await inter.response.send_message(embed=discord.Embed(title='–†–∞–Ω–≥–∏ - —É—Ä–æ–≤–Ω–∏', description='–í—ã ' + author + ' –∏–º–µ–µ—Ç–µ \n ' + level + ' —É—Ä–æ–≤–µ–Ω—å –∏ –≤–∞–º –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ —Å–ª–µ–¥—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è(–≤ –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–µ!) \n' + bardata[0] + '\n –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö —ç—Ç–æ ' + str(bardata[1]) + '%'))
  
@bot.command()
async def rank(ctx, author=None):
    if author == None:
        author = ctx.message.author
        authorid = author.id
    information = await lvls.open_user(authorid)
    level = str(information['lvls'])
    dolevel = information['dolevel']
    total = 1000
    bardata = progressBar.filledBar(total, dolevel, size=10)
    print(author)
    print(bardata[0])
    print(bardata[1])
    author = str(author)
    await ctx.send(embed=discord.Embed(title='–†–∞–Ω–≥–∏ - —É—Ä–æ–≤–Ω–∏', description='–í—ã ' + author + ' –∏–º–µ–µ—Ç–µ \n ' + level + ' —É—Ä–æ–≤–µ–Ω—å –∏ –≤–∞–º –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ —Å–ª–µ–¥—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è(–≤ –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–µ!) \n' + bardata[0] + '\n –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö —ç—Ç–æ ' + str(bardata[1]) + '%'))
@bot.slash_command(name='clear', description='–û—á–∏—â—è–µ—Ç —Ç–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª')
async def clear(inter, limit=20):
    """Delete the messages sent in current text-channel"""
    
    
    try:
        await inter.message.channel.purge(limit=limit)
        await inter.response.send_message('–û—á–∏—â–µ–Ω–æ!')
    except discord.Forbidden:
        await inter.response.send_message("I don't have permission to `Manage Messages`:disappointed_relieved:")
@bot.command(name='clear', aliases=['cls'])
async def clear(ctx, limit=20):
    """Delete the messages sent in current text-channel"""
    
    
    try:
        await ctx.message.channel.purge(limit=limit)
    except discord.Forbidden:
        await ctx.send("I don't have permission to `Manage Messages`:disappointed_relieved:")
@client.command()
async def number(ctx, num : int):
    a = random.randint(1, 200)
    if num == a:
        print('You Win!')
        await ctx.send('You win!')
    else:
        print('You not win :(')
        await ctx.send('You not win :(')
        print(a)
@client.slash_command(description='–ò–≥—Ä–∞ –ø—Ä–æ—Å—Ç–µ–Ω—å–∫–∞—è!')
async def number(inter, num : int):
    a = random.randint(1, 200)
    if num == a:
        print('You Win!')
        await inter.response.send_message('You win!')
    else:
        print('You not win :(')
        await inter.response.send_message('You not win :(')
        print(a)
@client.command()
async def helpgiver(ctx):
    # Help command that lists the current available commands and describes what they do
    ghelp = discord.Embed(color = 0x7289da)
    ghelp.set_author(name = 'Commands/Help', icon_url = '')
    ghelp.add_field(name= 'helpme', value = 'This command took you here!', inline = False)
    ghelp.add_field(name= 'version', value = 'Displays the current version number and recent updates.', inline = False)
    ghelp.add_field(name= 'giveaway', value = '__Can only be accessed by users with the "Giveaway Host" role.__\nStarts a giveaway for the server! This command will ask the host 3 questions.  The host will have 30 seconds per question to answer or they will be timed out!', inline = False)
    ghelp.add_field(name= 'reroll `#channel_name` `message id`', value = '__Can only be accessed by users with the "Giveaway Host" role.__\nThey must follow the command with the copied message id from the giveaway.', inline = False)
    ghelp.set_footer(text = 'Use the prefix "!" before all commands!')
    await ctx.send(embed = ghelp)



@client.command()
@commands.has_permissions(administrator=True)
async def giveaway(ctx):
    # Giveaway command requires the user to have a "Giveaway Host" role to function properly

    # Stores the questions that the bot will ask the user to answer in the channel that the command was made
    # Stores the answers for those questions in a different list
    giveaway_questions = ['–í –∫–∞–∫–æ–º –∫–∞–Ω–∞–ª–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ä–æ–∑—ã–≥—Ä—ã—à?', '–ö–∞–∫–æ–π –ø—Ä–∏–∑?', '–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –∏–¥—Ç–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)?',]
    giveaway_answers = []

    # Checking to be sure the author is the one who answered and in which channel
    def check(m):
        return m.author == ctx.author and m.channel == ctx.channel
    
    # Askes the questions from the giveaway_questions list 1 by 1
    # Times out if the host doesn't answer within 30 seconds
    for question in giveaway_questions:
        await ctx.send(question)
        try:
            message = await client.wait_for('message', timeout= 30.0, check= check)
        except asyncio.TimeoutError:
            await ctx.send('–í—ã –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –≤–æ–≤—Ä–µ–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –≤–æ–ø—Ä–æ—Å–∞.')
            return
        else:
            giveaway_answers.append(message.content)

    # Grabbing the channel id from the giveaway_questions list and formatting is properly
    # Displays an exception message if the host fails to mention the channel correctly
    try:
        c_id = int(giveaway_answers[0][2:-1])
    except:
        await ctx.send(f'–í—ã –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–ª–∏ –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º: {ctx.channel.mention}')
        return
    
    # Storing the variables needed to run the rest of the commands
    channel = client.get_channel(c_id)
    prize = str(giveaway_answers[1])
    time = int(giveaway_answers[2])

    # Sends a message to let the host know that the giveaway was started properly
    await ctx.send(f'–†–æ–∑—ã–≥—Ä—ã—à {prize} –Ω–∞—á–Ω–µ—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ {channel.mention}, —Ä–æ–∑—ã–≥—Ä—ã—à –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ {time} —Å–µ–∫—É–Ω–¥.')

    # Giveaway embed message
    give = discord.Embed(color = 0x2ecc71)
    give.set_author(name = f'–í–†–ï–ú–Ø –†–û–ó–´–ì–†–´–®–ê!', icon_url = 'https://i.imgur.com/VaX0pfM.png')
    give.add_field(name= f'{ctx.author.name} —Ä–∞–∑—ã–≥—Ä—ã–≤–∞–µ—Ç: {prize}!', value = f'–ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ üéâ, —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ!\n –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ {round(time/60, 2)} –º–∏–Ω—É—Ç!', inline = False)
    end = datetime.datetime.utcnow() + datetime.timedelta(seconds = time)
    give.set_footer(text = f'–†–∞–∑–¥–∞—á–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è –≤ {end} UTC!')
    my_message = await channel.send(embed = give)
    
    # Reacts to the message
    await my_message.add_reaction("üéâ")
    await asyncio.sleep(time)

    new_message = await channel.fetch_message(my_message.id)

    # Picks a winner
    users = await new_message.reactions[0].users().flatten()
    users.pop(users.index(client.user))
    winner = random.choice(users)

    # Announces the winner
    winning_announcement = discord.Embed(color = 0xff2424)
    winning_announcement.set_author(name = f'–†–û–ó–´–ì–†–´–® –ó–ê–ö–û–ù–ß–ò–õ–°–Ø!', icon_url= 'https://i.imgur.com/DDric14.png')
    winning_announcement.add_field(name = f'üéâ –ü—Ä–∏–∑: {prize}', value = f'ü•≥ **–í—ã–∏–≥—Ä–∞–ª**: {winner.mention}\n üé´ **–£—á–∞—Å—Ç–≤–æ–≤–∞–ª–æ**: {len(users)}', inline = False)
    winning_announcement.set_footer(text = '–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–≤–∏–µ!')
    await channel.send(embed = winning_announcement)



@client.command()
@commands.has_permissions(administrator=True)
async def reroll(ctx, channel: discord.TextChannel, id : int):
    # Reroll command requires the user to have a "Giveaway Host" role to function properly
    try:
        new_message = await channel.fetch_message(id)
    except:
        await ctx.send("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–π–¥–∏.")
        return
    if not channel:
        await ctx.send('–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∫–∞–Ω–∞–ª!')
    else:
        pass
    # Picks a new winner
    users = await new_message.reactions[0].users().flatten()
    users.pop(users.index(client.user))
    winner = random.choice(users)

    # Announces the new winner to the server
    reroll_announcement = discord.Embed(color = 0xff2424)
    reroll_announcement.set_author(name = f'–†–æ–∑—ã–≥—Ä—ã—à –±—ã–ª –ø–æ–≤—Ç–æ—Ä–µ–Ω –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º!', icon_url = 'https://i.imgur.com/DDric14.png')
    reroll_announcement.add_field(name = f'ü•≥ –ù–æ–≤—ã–π –ø–æ–±–µ–¥–∏—Ç–µ–ª—å:', value = f'{winner.mention}', inline = False)
    await channel.send(embed = reroll_announcement)
#@bot.ipc.route()
#async def get_guild_count(data):
    #return len(bot.guilds) # returns the len of the guilds to the client

#@bot.ipc.route()
#async def get_guild_ids(data):
    #final = []
    #for guild in bot.guilds:
        #final.append(guild.id)
    #return final # returns the guild ids to the client

#@bot.ipc.route()
#async def get_guild(data):
    #guild = bot.get_guild(data.guild_id)
    #if guild is None: return None

    #guild_data = {
        #"name": guild.name,
        #"id": guild.id,
        #"prefix" : "?"
    #}

    #return guild_data


@bot.slash_command(description='–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–≤–∞—Ç–∞—Ä–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
async def avatar(inter, *,  avamember : discord.Member=None):
    author = inter.author
    userAvatarUrl = author.avatar
    if not avamember:
        embed = discord.Embed(description =  "–ê–≤–∞—Ç–∞—Ä " + author.mention, color = 0x00008b)
        embed.set_image(url = userAvatarUrl)
        embed.set_footer(text=f'{inter.author}', icon_url = userAvatarUrl)
        await inter.response.send_message(embed = embed)
    try:
        author = inter.author
        userAvatarUrl = avamember.avatar.url
        embed = discord.Embed(description =  "–ê–≤–∞—Ç–∞—Ä " + avamember.mention, color = 0x00008b)
        embed.set_image(url = userAvatarUrl)
        embed.set_footer(text=f'{avamember}', icon_url = userAvatarUrl)
        await inter.response.send_message(embed = embed)
    except discord.Forbidden:
        return
    except discord.HTTPException:
        return
@bot.command()
async def avatar(ctx, *,  avamember : discord.Member=None):
    author = ctx.author
    userAvatarUrl = author.avatar
    if not avamember:
        embed = discord.Embed(description =  "–ê–≤–∞—Ç–∞—Ä " + author.mention, color = 0x00008b)
        embed.set_image(url = userAvatarUrl)
        embed.set_footer(text=f'{ctx.author}', icon_url = userAvatarUrl)
        await ctx.send(embed = embed)
    try:
        author = ctx.message.author
        userAvatarUrl = avamember.avatar.url
        embed = discord.Embed(description =  "–ê–≤–∞—Ç–∞—Ä " + avamember.mention, color = 0x00008b)
        embed.set_image(url = userAvatarUrl)
        embed.set_footer(text=f'{avamember}', icon_url = userAvatarUrl)
        await ctx.send(embed = embed)
    except discord.Forbidden:
        return
    except discord.HTTPException:
        return
@bot.event
async def on_member_join(member):
    server = member.server
    channel = server.default_channel
    retStr = str("""```yaml\n–ü—Ä–∏–≤–µ—Ç!\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –Ω–∞—à —Å–µ—Ä–≤–µ—Ä!\n–ù–∞–¥–µ—é—Å—å —Ç–µ–±–µ —Ç—É—Ç –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è.\n–ï—Å–ª–∏ –∑–∞–±–ª—É–¥–µ—à—å—Å—è –ø–∏—à–∏ !help,–∫—Å—Ç–∞—Ç–∏ —É –Ω–∞—Å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –ø–∏—à—É—Ç—Å—è —Å !\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏ –∑–∞–π–¥–∏ –≤ —á–∞—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏\n—É–¥–∞—á–∏ —Ç–µ–±–µ```""")
    embed = discord.Embed(title="Welcome",colour=discord.Colour.blue())
    embed.add_field(name="–ü—Ä–∏–≤–µ—Ç",value=retStr)
    await bot.send_message(channel, embed=embed)
#@bot.event
#async def on_command_error(ctx, error):
    #if isinstance(error, commands.CommandNotFound):

        #await ctx.send(embed = discord.Embed(description = f'{ctx.author.name}, –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!', colour = discord.Color.red()))
    #if isinstance(error, commands.errors.MissingPermissions):

        #await ctx.send(embed = discord.Embed(description = f'{ctx.author.name}, –≤—ã –Ω–µ –∏–º–µ–µ—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ –∏—Å–ø–æ–ª—å–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã!', colour = discord.Color.red()))
        #return
    #if isinstance(error, commands.MissingRequiredArgument):
        #await ctx.send(embed = discord.Embed(description = f'{ctx.author.name} –≤—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç –∫–∞–∫–æ–π-—Ç–æ'))
        #return
@client.command()
async def server(ctx):
    statuses = [len(list(filter(lambda m: str(m.status) == "online", ctx.guild.members))),
                len(list(filter(lambda m: str(m.status) == "idle", ctx.guild.members))),
                len(list(filter(lambda m: str(m.status) == "dnd", ctx.guild.members))),
                len(list(filter(lambda m: str(m.status) == "offline", ctx.guild.members)))]
    
    BannerURl = ctx.guild.banner
    
    icon = ctx.guild.icon
    members = len(list(filter(lambda m: not m.bot, ctx.guild.members)))
    bots = len(list(filter(lambda m: m.bot, ctx.guild.members)))
    all = len(ctx.guild.members)
    text = len(ctx.guild.voice_channels)
    voice = len(ctx.guild.text_channels)
    category = len(ctx.guild.categories)
    allchannels = len(ctx.guild.channels)
    noanimemoji = 0
    anim_emoji = 0
    allemoji = len(ctx.guild.emojis)
    limitemoji = ctx.guild.emoji_limit
    twofa = ctx.guild.mfa_level
    for emoji in ctx.guild.emojis:
        if emoji.animated == True:
            anim_emoji += 1
        elif emoji.animated == False:
            noanimemoji += 1
    public = ctx.guild.public_updates_channel
    rules = ctx.guild.rules_channel
    description = ctx.guild.description
    region = ctx.guild.region

    embed = discord.Embed(title=f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ {ctx.guild.name}", color = 0x00008b)
    embed.add_field(name = "–†–æ–ª–µ–π:", value = len(ctx.guild.roles), inline = True)
    embed.add_field(name="–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤", value=f"<:all:942048151571947580>: {all}\n<:members:942049581926060072> : {members}\n<:bot:942049242325843968>: {bots}")
    embed.add_field(name = "–ó–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö", value = len(await ctx.guild.bans()))
    embed.add_field(name="–°—Ç–∞—Ç—É—Å—ã", value=f"üü¢: {statuses[0]}\nüåô: {statuses[1]}\n‚õî: {statuses[2]}\n<:offline:942040928904962050>: {statuses[3]}")
    embed.add_field(name = "–ö–∞–Ω–∞–ª–æ–≤:", value = f"–í—Å–µ–≥–æ: {allchannels}\n–¢–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {text}\n–ì–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {voice}\n–ö–∞—Ç–µ–≥–æ—Ä–∏–π: {category}")
    embed.add_field(name = "–≠–º–æ–¥–∑–∏:", value = f"–í—Å–µ–≥–æ: {allemoji}\n–ê–Ω–∏–º.: {anim_emoji}\n–°—Ç–∞—Ç.: {noanimemoji}\n–õ–∏–º–∏—Ç: {limitemoji}")
    embed.add_field(name = "–†–µ–≥–∏–æ–Ω:", value = ctx.guild.region)
    if twofa == 0:
        embed.add_field(name = '–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ 2FA', value = '–û—Ç–∫–ª—é—á–µ–Ω–æ')
    else:
        embed.add_field(name = '–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ 2FA', value = '–í–∫–ª—é—á–µ–Ω–æ')
    embed.add_field(name = "ID —Å–µ—Ä–≤–µ—Ä–∞:", value = ctx.guild.id)
    embed.add_field(name = "–°–µ—Ä–≤–µ—Ä —Å–æ–∑–¥–∞–Ω (–ü–æ –≤—Ä–µ–º–µ–Ω–∏ UTC +0)", value = ctx.guild.created_at.strftime("%d.%m.%Y\n%H:%M:%S"))
    embed.add_field(name = "–†–æ–ª—å –±–æ—Ç–∞:", value = ctx.guild.self_role.mention)
    if public == None:
        embed.add_field(name = "–ö–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:", value = '–ù–µ—Ç—É')
    else:
        embed.add_field(name = "–ö–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:", value = ctx.guild.public_updates_channel)
    if rules == None:
        embed.add_field(name = "–ö–∞–Ω–∞–ª –ø—Ä–∞–≤–∏–ª:", value = '–ù–µ—Ç—É')
    else:
        embed.add_field(name = "–ö–∞–Ω–∞–ª –ø—Ä–∞–≤–∏–ª:", value = '–ù–µ—Ç—É')
    embed.add_field(name = "–£—Ä–æ–≤–µ–Ω—å —Å–µ—Ä–≤–µ—Ä–∞", value = ctx.guild.premium_tier)
    embed.add_field(name = "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è", value = len(await ctx.guild.invites()))
    embed.add_field(name = "–ë—É—Å—Ç—ã", value = ctx.guild.premium_subscription_count)
    embed.add_field(name = "–†–æ–ª—å –±—É—Å—Ç–µ—Ä–æ–≤", value = ctx.guild.premium_subscriber_role)
    embed.add_field(name = "–í–ª–∞–¥–µ–ª–µ—Ü", value = ctx.guild.owner.mention)
    embed.add_field(name = "ID –í–ª–∞–¥–µ–ª—å—Ü–∞", value = ctx.guild.owner_id)
    embed.add_field(name = "–ë–æ—Ç", value = ctx.guild.me.mention)
    if icon:
        embed.set_thumbnail(url = icon)
    if BannerURl:
        embed.set_image(url = BannerURl)
    await ctx.send(embed=embed)
@client.slash_command(description='–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ—É –æ–± —Å–µ—Ä–≤–µ—Ä–µ')
async def server(inter):
    ctx = inter
    statuses = [len(list(filter(lambda m: str(m.status) == "online", ctx.guild.members))),
                len(list(filter(lambda m: str(m.status) == "idle", ctx.guild.members))),
                len(list(filter(lambda m: str(m.status) == "dnd", ctx.guild.members))),
                len(list(filter(lambda m: str(m.status) == "offline", ctx.guild.members)))]
    if ctx.guild.banner:
        BannerURl = ctx.guild.banner.url
    else:
        BannerURl = None
    icon = ctx.guild.icon.url
    members = len(list(filter(lambda m: not m.bot, ctx.guild.members)))
    bots = len(list(filter(lambda m: m.bot, ctx.guild.members)))
    all = len(ctx.guild.members)
    text = len(ctx.guild.voice_channels)
    voice = len(ctx.guild.text_channels)
    category = len(ctx.guild.categories)
    allchannels = len(ctx.guild.channels)
    noanimemoji = 0
    anim_emoji = 0
    allemoji = len(ctx.guild.emojis)
    limitemoji = ctx.guild.emoji_limit
    twofa = ctx.guild.mfa_level
    for emoji in ctx.guild.emojis:
        if emoji.animated == True:
            anim_emoji += 1
        elif emoji.animated == False:
            noanimemoji += 1
    public = ctx.guild.public_updates_channel
    rules = ctx.guild.rules_channel
    description = ctx.guild.description
    region = ctx.guild.region

    embed = discord.Embed(title=f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ {ctx.guild.name}", color = 0x00008b)
    embed.add_field(name = "–†–æ–ª–µ–π:", value = len(ctx.guild.roles), inline = True)
    embed.add_field(name="–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤", value=f"<:all:942048151571947580>: {all}\n<:members:942049581926060072> : {members}\n<:bot:942049242325843968>: {bots}")
    embed.add_field(name = "–ó–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö", value = len(await ctx.guild.bans()))
    embed.add_field(name="–°—Ç–∞—Ç—É—Å—ã", value=f"üü¢: {statuses[0]}\nüåô: {statuses[1]}\n‚õî: {statuses[2]}\n<:offline:942040928904962050>: {statuses[3]}")
    embed.add_field(name = "–ö–∞–Ω–∞–ª–æ–≤:", value = f"–í—Å–µ–≥–æ: {allchannels}\n–¢–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {text}\n–ì–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {voice}\n–ö–∞—Ç–µ–≥–æ—Ä–∏–π: {category}")
    embed.add_field(name = "–≠–º–æ–¥–∑–∏:", value = f"–í—Å–µ–≥–æ: {allemoji}\n–ê–Ω–∏–º.: {anim_emoji}\n–°—Ç–∞—Ç.: {noanimemoji}\n–õ–∏–º–∏—Ç: {limitemoji}")
    embed.add_field(name = "–†–µ–≥–∏–æ–Ω:", value = ctx.guild.region)
    if twofa == 0:
        embed.add_field(name = '–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ 2FA', value = '–û—Ç–∫–ª—é—á–µ–Ω–æ')
    else:
        embed.add_field(name = '–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ 2FA', value = '–í–∫–ª—é—á–µ–Ω–æ')
    embed.add_field(name = "ID —Å–µ—Ä–≤–µ—Ä–∞:", value = ctx.guild.id)
    embed.add_field(name = "–°–µ—Ä–≤–µ—Ä —Å–æ–∑–¥–∞–Ω (–ü–æ –≤—Ä–µ–º–µ–Ω–∏ UTC +0)", value = ctx.guild.created_at.strftime("%d.%m.%Y\n%H:%M:%S"))
    embed.add_field(name = "–†–æ–ª—å –±–æ—Ç–∞:", value = ctx.guild.self_role.mention)
    if public == None:
        embed.add_field(name = "–ö–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:", value = '–ù–µ—Ç—É')
    else:
        embed.add_field(name = "–ö–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:", value = ctx.guild.public_updates_channel)
    if rules == None:
        embed.add_field(name = "–ö–∞–Ω–∞–ª –ø—Ä–∞–≤–∏–ª:", value = '–ù–µ—Ç—É')
    else:
        embed.add_field(name = "–ö–∞–Ω–∞–ª –ø—Ä–∞–≤–∏–ª:", value = '–ù–µ—Ç—É')
    embed.add_field(name = "–£—Ä–æ–≤–µ–Ω—å —Å–µ—Ä–≤–µ—Ä–∞", value = ctx.guild.premium_tier)
    embed.add_field(name = "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è", value = len(await ctx.guild.invites()))
    embed.add_field(name = "–ë—É—Å—Ç—ã", value = ctx.guild.premium_subscription_count)
    embed.add_field(name = "–†–æ–ª—å –±—É—Å—Ç–µ—Ä–æ–≤", value = ctx.guild.premium_subscriber_role)
    embed.add_field(name = "–í–ª–∞–¥–µ–ª–µ—Ü", value = ctx.guild.owner.mention)
    embed.add_field(name = "ID –í–ª–∞–¥–µ–ª—å—Ü–∞", value = ctx.guild.owner_id)
    embed.add_field(name = "–ë–æ—Ç", value = ctx.guild.me.mention)
    if icon:
        embed.set_thumbnail(url = icon)
    if BannerURl:
        embed.set_image(url = BannerURl)
    await ctx.response.send_message(embed=embed)
@bot.command()
async def ver(ctx):
    await ctx.reply(f"My ver " + settings['version'] + "!")
@bot.slash_command(description='–í–µ—Ä—Å–∏—è –±–æ—Ç–∞')
async def ver(inter):
    await inter.response.send_message(f"My ver " + settings['version'] + "!")
@bot.command() # –ù–µ –ø–µ—Ä–µ–¥–∞—ë–º –∞—Ä–≥—É–º–µ–Ω—Ç pass_context, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –±—ã–ª –Ω—É–∂–µ–Ω –≤ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏—è—Ö.
async def hello(ctx): # –°–æ–∑–¥–∞—ë–º —Ñ—É–Ω–∫—Ü–∏—é –∏ –ø–µ—Ä–µ–¥–∞—ë–º –∞—Ä–≥—É–º–µ–Ω—Ç ctx.
    author = ctx.message.author # –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é author –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—É–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ.
    await ctx.send(f'Hello, {author.mention}!') # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –∞–≤—Ç–æ—Ä–∞, –æ–±—Ä–∞—â–∞—è—Å—å –∫ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π author.
 #This should be at your other imports at the top of your code
@bot.event
async def on_guild_join(guild):
    await bot.change_presence(status=discord.Status.online, activity=discord.Game(name="!help | " + str(len(bot.guilds)) + " —Å–µ—Ä–≤–µ—Ä–æ–≤"))
class HelpList(discord.ui.Select):
    def __init__(self):

        # Set the options that will be presented inside the dropdown
        options = [
            discord.SelectOption(
                label="–ú–æ–¥–µ—Ä–∞—Ü–∏—è", description="–ö–æ–º–∞–Ω–¥—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏", emoji="üõ†"
            ),
            discord.SelectOption(
                label="–í–µ—Å–µ–ª–æ–µ!/–†–∞–∑–Ω–æ–µ!", description="–ö–æ–º–∞–Ω–¥—ã –≤–µ—Å–µ–ª–æ—Å—Ç–∏!", emoji="üòÑ"
            ),
            discord.SelectOption(
                label="–≠–∫–æ–Ω–æ–º–∏–∫–∞", description="–≠–∫–æ–Ω–æ–º–∏–∫–∞", emoji="üí∏"
            ),
            discord.SelectOption(
                label='–ê–≤–∞—Ç–∞—Ä—ã', description='–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–≤', emoji='üî¥'
            ),
        ]

        # The placeholder is what will be shown when no option is chosen
        # The min and max values indicate we can only pick one of the three options
        # The options parameter defines the dropdown options. We defined this above
        super().__init__(
            placeholder="–í—ã–±–µ—Ä–µ—Ç–µ –ø—É–Ω–∫—Ç...",
            min_values=1,
            max_values=1,
            options=options,
        )

    async def callback(self, interaction: discord.MessageInteraction):
        # Use the interaction object to send a response message containing
        # the user's favourite colour or choice. The self object refers to the
        # Select object, and the values attribute gets a list of the user's
        # selected options. We only want the first one.
        if self.values[0] == '–ê–≤–∞—Ç–∞—Ä—ã':
            await interaction.response.send_message(embed=discord.Embed(title='–ö–æ–º–∞–Ω–¥—ã', description='`b!blue_avatar` \n `b!pink_avatar` \n `b!multi_avatar` \n `b!yellow_avatar` \n `b!red_avatar` \n `b!grey_avatar` \n `b!green_avatar`'), ephemeral=True)
        if self.values[0] == '–ú–æ–¥–µ—Ä–∞—Ü–∏—è':
            await interaction.response.send_message(embed=discord.Embed(title='–ö–æ–º–∞–Ω–¥—ã', description="–ö–æ–º–∞–Ω–¥—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏:\n`b!ban`\n`b!mute`\n`b!unban`\n`b!kick`\n`b!ping`\n`b!unmute`\n`b!ver`"), ephemeral=True)
        if self.values[0] == '–í–µ—Å–µ–ª–æ–µ!/–†–∞–∑–Ω–æ–µ!':
            await interaction.response.send_message(embed=discord.Embed(title='–ö–æ–º–∞–Ω–¥—ã', description='`b!hello`\n`b!avatar`\n`b!dog`\n`b!fox`\n`b!cat`\n`b!panda`\n`b!rank`\n'), ephemeral=True)
        #await interaction.response.send_message(f"Your favourite colour is {self.values[0]}")
        if self.values[0] == '–≠–∫–æ–Ω–æ–º–∏–∫–∞':
            await interaction.response.send_message(embed=discord.Embed(title='–ö–æ–º–∞–Ω–¥—ã', description='–¢—ã —ç–∫–æ–Ω–æ–º–∏—Å—Ç!) \n`b!bal`\n`b!work`\n`b!pay`\n`b!crime`'), ephemeral=True)
class Helpbl(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

        # Adds the dropdown to our view object.
        self.add_item(HelpList())
    @discord.ui.button(label="–ú–æ–π –∏–Ω–≤–∞–π—Ç!", style=ButtonStyle.blurple, row=1)
    async def myinvite(
        self, button: discord.ui.Button, interaction: discord.MessageInteraction
    ):
        await interaction.response.send_message("https://discord.com/api/oauth2/authorize?client_id=935590256093331526&permissions=8&scope=bot", ephemeral=True)

    @discord.ui.button(label = '–°–µ—Ä–≤–µ—Ä –ø–æ–¥–¥–µ—Ä–∂–∫–∏', emoji="ü•≥", style=ButtonStyle.green, row=2)
    async def supportserver(
        self, button: discord.ui.Button, interaction: discord.MessageInteraction
    ):
        await interaction.response.send_message("https://discord.gg/zy3qJM4mvE", ephemeral=True)
    @discord.ui.button(label = '–î–æ–Ω–∞—Ç', emoji="ü•≥", style=ButtonStyle.green, row=2)
    async def donate(
        self, button: discord.ui.Button, interaction: discord.MessageInteraction
    ):
        await interaction.response.send_message("–°–º–æ—Ç—Ä–∏ —Ç—ã –ø–æ–ª—É—á–∏—à –æ—Å–æ–±–µ–Ω–Ω—É—é —Ä–æ–ª—å –Ω–∞ –¥–∏—Å–∫–æ—Ä–¥ —Å–µ—Ä–≤–µ—Ä–µ \n –∏ —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–æ—Ç–∞! \n Duino-coin: Mordsdima \n —Ç–∞–∫–∂–µ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–æ–ª—å –¥–æ–Ω–∞—Ç–µ—Ä–∞ –Ω–∞ –Ω–∞—à–µ–º —Å–µ—Ä–≤–µ—Ä–µ –Ω–∞–ø–∏—à–∏ –≤ –ª–∏—á–∫—É —Å–æ–∑–¥–∞—Ç–µ–ª—è –∏ –∫–∏–Ω—å —Å–∫—Ä–∏–Ω —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤—ã! \n Discord: TheDiman#2022", ephemeral=True)
#@bot.command()
#async def buttons(ctx):

    # Sends a message with a row of buttons.
    #await ctx.send("Here are some buttons!", view=Helpbl())

    # This is how the command would look like: https://i.imgur.com/ZYdX1Jw.png



@bot.event
async def on_ready():
    await bot.change_presence(status=discord.Status.online, activity=discord.Game(name="!help | " + str(len(bot.guilds)) + " —Å–µ—Ä–≤–µ—Ä–æ–≤"))
    print("Bot is ready!")
    print(f'Im at {bot.user.name} and {bot.user.id}')

@bot.command(pass_context=True)
@commands.has_permissions(administrator=True)
async def ban(ctx, member, *, reason):
    print(type(member))
    await member.ban(reason=reason)
    await ctx.channel.purge(limit=0)
    emb = discord.Embed(color=344462)
    emb.add_field(name='‚úÖ Ban –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', value='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω! –ø–æ –ø—Ä–∏—á–∏–Ω–µ {reason}'.format(member.mention))
    await ctx.reply(embed = emb)
@bot.command(pass_context=True)
@commands.has_permissions(administrator=True)
async def kick(ctx, member: discord.Member, *, reason):
    
    await member.kick(reason=reason)
    await ctx.channel.purge(limit=0)
    emb = discord.Embed(color=344462)
    emb.add_field(name='‚úÖ Kick –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', value='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω! /n –ø–æ –ø—Ä–∏—á–∏–Ω–µ {reason}'.format(member.mention))
    await ctx.reply(embed = emb)
@bot.command()
async def ban_id(ctx, user_id=None, time1: str=None, reason=None):
    if not user_id:
        await ctx.message.add_reaction("<:error:925385765188419604>")
        Eembed = discord.Embed(description = '‚ùå **–û—à–∏–±–∫–∞! –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n**–ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã**\n**[] –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç, () –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç**\n\n**Gides!ban_id [ID —É—á–∞—Å—Ç–Ω–∏–∫–∞] (–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–∞–Ω–∞ `w|week|weeks|–Ω|–Ω–µ–¥|–Ω–µ–¥–µ–ª—è|–Ω–µ–¥–µ–ª–∏|–Ω–µ–¥–µ–ª—å|–Ω–µ–¥–µ–ª—é|d|day|days|–¥|–¥–µ–Ω—å|–¥–Ω—è|–¥–Ω–µ–π|h|hour|hours|—á|—á–∞—Å|—á–∞—Å–∞|—á–∞—Å–æ–≤|min|mins|minute|minutes|–º–∏–Ω|–º–∏–Ω—É—Ç–∞|–º–∏–Ω—É—Ç—É|–º–∏–Ω—É—Ç—ã|–º–∏–Ω—É—Ç|s|sec|secs|second|seconds|c|—Å–µ–∫|—Å–µ–∫—É–Ω–¥–∞|—Å–µ–∫—É–Ω–¥—É|—Å–µ–∫—É–Ω–¥—ã|—Å–µ–∫—É–Ω–¥`)**', color=0x00008b)
        await ctx.send(embed = Eembed)
        return
    if not ctx.author.guild_permissions.ban_members:
        await ctx.message.add_reaction("<:error:925385765188419604>")
        Embed = discord.Embed(description = '‚ùå **–û—à–∏–±–∫–∞! –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤**', color=0x00008b)
        await ctx.send(embed = Embed)
        return
    if user_id == ctx.author:
        await ctx.message.add_reaction("<:error:925385765188419604>")
        Embed = discord.Embed(description = '‚ùå **–û—à–∏–±–∫–∞! –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±–∞–Ω–∏—Ç—å —Å–µ–±—è**', color=0x00008b)
        await ctx.send(embed = Embed)
        return
    try:
        user = await client.fetch_user(user_id=user_id)
        Embed = discord.Embed(title = f"‚úÖ {user} –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–±–∞–Ω–µ–Ω", description = f'\n–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {ctx.author.mention}\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–∞–Ω–∞: {time1} \n–ü—Ä–∏—á–∏–Ω–∞: {reason}', color=0x00008b)
        await ctx.send(embed = Embed)
        await ctx.guild.ban(user)
        await ctx.message.add_reaction("<:succesfully:925385120280612864>")
        Embed = discord.Embed(description = f'–¢–µ–±—è –∑–∞–±–∞–Ω–∏–ª–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {ctx.guild.name} –ø–æ –ø—Ä–∏—á–∏–Ω–µ {reason}, –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {ctx.author}, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {time1}', color=0x00008b)
        await user.send(embed=Embed)
        seconds, str_time = str_time_to_seconds(time1)
        await asyncio.sleep(seconds)
        await ctx.guild.unban(user)
        link = await ctx.channel.create_invite(max_age=300)
        Embed = discord.Embed(description = f'–£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –±–∞–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ "{ctx.guild.name}"!–ó–∞—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ: {link}', color=0x00008b)
        await user.send(embed = Embed)
        
    except discord.Forbidden:
        return

    except discord.HTTPException:
        return

ALL_ACTIVITIES = [act.name for act in discord.PartyType]
@bot.command(pass_context=True,name='activity')
async def activity(ctx, game=None):
    
    if not game:
        await ctx.send(embed=discord.Embed(title='[ERROR 400 BAD REQUEST] –≤—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∏–≥—Ä—É!\n' + '\n'.join(ALL_ACTIVITIES)))
        return
    
    
    if not ctx.author.voice:
        return await ctx.send("you're not in voice channel")
    channel = ctx.author.voice.channel
    #wait = await ctx.send(embed=discord.Embed(title='–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...'))
    link = await channel.create_invite(reason='Activity created',target_type=discord.InviteTarget.embedded_application,target_application=getattr(discord.PartyType, game))
    print(link)
    await ctx.send(f'[click here to start the activity]({link})')
@bot.slash_command()
async def create_invite(self, inter: discord.ApplicationCommandInteraction,
                        custom_activity: commands.option_enum(ALL_ACTIVITIES)):
    """
    Select custom activity
    """

    if not inter.user.voice:
        return await inter.response.send_message("you're not in voice channel")
    voice_channel = inter.user.voice.channel
    link = await voice_channel.create_invite(reason='Activity created',
                                                 target_type=discord.InviteTarget.embedded_application,
                                                 target_application=getattr(discord.PartyType, custom_activity))
    await inter.response.send_message(f"[click here to start the activity]({link})")
@bot.command(pass_context=True)
@commands.has_permissions(administrator=True)
async def unban(ctx, *, member):
    
    banned_users = await ctx.guild.bans()
    await ctx.channel.purge(limit=0)

    for ban_entry in banned_users:
        user = ban_entry.user
        await ctx.guild.unban(user)
        emb = discord.Embed(color=344462)
        emb.add_field(name='‚úÖ UnBan –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', value='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –±—ã–ª —Ä–∞–∑–±–∞–Ω–µ–Ω.'.format(member))
        await ctx.reply(embed = emb)
        return








@bot.command()
async def mute(ctx, member: discord.Member=None, time:str=None, reason=None):
    guild = ctx.guild
    mutedRole = discord.utils.get(guild.roles, name="MutedBB")
    if not mutedRole:
        mutedRole = await guild.create_role(name="MutedBB")
        for channel in guild.channels:
            await channel.set_permissions(mutedRole,
            speak=False,
            send_messages=False, 
            read_message_history=True, 
            read_messages=True)         
    if not member:
        Embed = discord.Embed(description = '‚ùå **–û—à–∏–±–∫–∞! –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n**–ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã**\n**[] –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç, () –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç**\n\n**!mute [—É—á–∞—Å—Ç–Ω–∏–∫] [–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å `w|week|weeks|–Ω|–Ω–µ–¥|–Ω–µ–¥–µ–ª—è|–Ω–µ–¥–µ–ª–∏|–Ω–µ–¥–µ–ª—å|–Ω–µ–¥–µ–ª—é|d|day|days|–¥|–¥–µ–Ω—å|–¥–Ω—è|–¥–Ω–µ–π|h|hour|hours|—á|—á–∞—Å|—á–∞—Å–∞|—á–∞—Å–æ–≤|min|mins|minute|minutes|–º–∏–Ω|–º–∏–Ω—É—Ç–∞|–º–∏–Ω—É—Ç—É|–º–∏–Ω—É—Ç—ã|–º–∏–Ω—É—Ç|s|sec|secs|second|seconds|c|—Å–µ–∫|—Å–µ–∫—É–Ω–¥–∞|—Å–µ–∫—É–Ω–¥—É|—Å–µ–∫—É–Ω–¥—ã|—Å–µ–∫—É–Ω–¥`] (–ø—Ä–∏—á–∏–Ω–∞)**', color=0x00008b)
        await ctx.send(embed = Embed)
        await ctx.message.add_reaction("<:error:925385765188419604>")
        return
    if not time:
        Embed = discord.Embed(description = '‚ùå **–û—à–∏–±–∫–∞! –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –≤—Ä–µ–º—è –º—É—Ç–∞**\n**–ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã**\n**[] –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç, () –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç**\n\n**!mute [—É—á–∞—Å—Ç–Ω–∏–∫] [–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å `w|week|weeks|–Ω|–Ω–µ–¥|–Ω–µ–¥–µ–ª—è|–Ω–µ–¥–µ–ª–∏|–Ω–µ–¥–µ–ª—å|–Ω–µ–¥–µ–ª—é|d|day|days|–¥|–¥–µ–Ω—å|–¥–Ω—è|–¥–Ω–µ–π|h|hour|hours|—á|—á–∞—Å|—á–∞—Å–∞|—á–∞—Å–æ–≤|min|mins|minute|minutes|–º–∏–Ω|–º–∏–Ω—É—Ç–∞|–º–∏–Ω—É—Ç—É|–º–∏–Ω—É—Ç—ã|–º–∏–Ω—É—Ç|s|sec|secs|second|seconds|c|—Å–µ–∫|—Å–µ–∫—É–Ω–¥–∞|—Å–µ–∫—É–Ω–¥—É|—Å–µ–∫—É–Ω–¥—ã|—Å–µ–∫—É–Ω–¥`] (–ø—Ä–∏—á–∏–Ω–∞)**', color=0x00008b)
        await ctx.send(embed = Embed)
        await ctx.message.add_reaction("<:error:925385765188419604>")
        return
    if member == ctx.author:
        Embed = discord.Embed(description = '‚ùå **–û—à–∏–±–∫–∞! –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–º—É—Ç–∏—Ç—å —Å–µ–±—è**', color=0x00008b)
        await ctx.send(embed = Embed)
        await ctx.message.add_reaction("<:error:925385765188419604>")
        return
    if member.top_role >= ctx.author.top_role:
        Embed = discord.Embed(description = '‚ùå **–û—à–∏–±–∫–∞! –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–º—É—Ç–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–π —Ä–æ–ª—å—é**', color=0x00008b)
        await ctx.send(embed = Embed)
        await ctx.message.add_reaction("<:error:925385765188419604>")
        return
    if not ctx.author.guild_permissions.manage_messages:
        Embed = discord.Embed(description = '‚ùå **–û—à–∏–±–∫–∞! –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤**', color=0x00008b)
        await ctx.send(embed = Embed)
        await ctx.message.add_reaction("<:error:925385765188419604>")
        return                              
    try:
        mutedRole=discord.utils.get(ctx.guild.roles, name="MutedBB")
        time_convert = {"s":1, "m":60, "h":3600,"d":86400}
        tempmute= int(time[0]) * time_convert[time[-1]]
        await member.add_roles(mutedRole)
        await member.timeout(duration=tempmute, reason=reason)
        embed = discord.Embed(description= f"‚úÖ|{member.mention} –±—ã–ª –∑–∞–º—å—é—á–µ–Ω\n–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {ctx.author.mention}\n–í—Ä–µ–º—è: {time}\n–ü—Ä–∏—á–∏–Ω–∞: {reason}", color=discord.Color.green())
        await ctx.send(embed=embed)
        await ctx.message.add_reaction("<:succesfully:925385120280612864>")
        await asyncio.sleep(tempmute)
        await member.remove_roles(mutedRole)
    except discord.Forbidden:
        return

    except discord.HTTPException:
        return
@bot.slash_command(description='—Ä–∞–∑ –º—å—é—Ç')
async def unmute(ctx, member: discord.Member=None):
    ctx.send = ctx.response.send_message
    if not member:
        Embed = discord.Embed(description = ':x: **–û—à–∏–±–∫–∞! –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n**–ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã**\n**[] –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç**\n\n**Gides!unmute [—É—á–∞—Å—Ç–Ω–∏–∫]**', color=0x00008b)
        await ctx.send(embed = Embed)
        await ctx.message.add_reaction("<:error:925385765188419604>")
        return
    if member == ctx.author:
        Embed = discord.Embed(description = ':x: **–û—à–∏–±–∫–∞! –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–∞–∑–º—É—Ç–∏—Ç—å —Å–µ–±—è**', color=0x00008b)
        await ctx.send(embed = Embed)
        await ctx.message.add_reaction("<:error:925385765188419604>")
        return
    if member.top_role >= ctx.author.top_role:
        Embed = discord.Embed(description = ':x: **–û—à–∏–±–∫–∞! –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–∞–∑–º—É—Ç–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–π —Ä–æ–ª—å—é**', color=0x00008b)
        await ctx.send(embed = Embed)
        await ctx.message.add_reaction("<:error:925385765188419604>")
        return
    if not ctx.author.guild_permissions.manage_messages:
        Embed = discord.Embed(description = ':x: **–û—à–∏–±–∫–∞! –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤**', color=0x00008b)
        await ctx.send(embed = Embed)
        await ctx.message.add_reaction("<:error:925385765188419604>")
        return
    try:
        mutedRole = discord.utils.get(ctx.guild.roles, name="MutedBB")
        await member.remove_roles(mutedRole)
        embed = discord.Embed(description= f":white_check_mark:|{member.mention} –±—ã–ª —Ä–∞–∑–º—É—á–µ–Ω\n–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {ctx.author.mention}", color=discord.Color.green())
        await ctx.send(embed=embed)
        await ctx.message.add_reaction("<:succesfully:925385120280612864>")
    except discord.Forbidden:
        return

    except discord.HTTPException:
        return
@bot.command()
async def unmute(ctx, member: discord.Member=None):
    if not member:
        Embed = discord.Embed(description = ':x: **–û—à–∏–±–∫–∞! –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n**–ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã**\n**[] –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç**\n\n**Gides!unmute [—É—á–∞—Å—Ç–Ω–∏–∫]**', color=0x00008b)
        await ctx.send(embed = Embed)
        await ctx.message.add_reaction("<:error:925385765188419604>")
        return
    if member == ctx.author:
        Embed = discord.Embed(description = ':x: **–û—à–∏–±–∫–∞! –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–∞–∑–º—É—Ç–∏—Ç—å —Å–µ–±—è**', color=0x00008b)
        await ctx.send(embed = Embed)
        await ctx.message.add_reaction("<:error:925385765188419604>")
        return
    if member.top_role >= ctx.author.top_role:
        Embed = discord.Embed(description = ':x: **–û—à–∏–±–∫–∞! –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–∞–∑–º—É—Ç–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–π —Ä–æ–ª—å—é**', color=0x00008b)
        await ctx.send(embed = Embed)
        await ctx.message.add_reaction("<:error:925385765188419604>")
        return
    if not ctx.author.guild_permissions.manage_messages:
        Embed = discord.Embed(description = ':x: **–û—à–∏–±–∫–∞! –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤**', color=0x00008b)
        await ctx.send(embed = Embed)
        await ctx.message.add_reaction("<:error:925385765188419604>")
        return
    try:
        mutedRole = discord.utils.get(ctx.guild.roles, name="MutedBB")
        await member.remove_roles(mutedRole)
        embed = discord.Embed(description= f":white_check_mark:|{member.mention} –±—ã–ª —Ä–∞–∑–º—É—á–µ–Ω\n–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {ctx.author.mention}", color=discord.Color.green())
        await ctx.send(embed=embed)
        await ctx.message.add_reaction("<:succesfully:925385120280612864>")
    except discord.Forbidden:
        return

    except discord.HTTPException:
        return
@bot.command()
async def invite(ctx):
    emb = discord.Embed(title = '–ò–Ω–≤–∞–π—Ç –±–æ—Ç–∞', description='–ò–Ω–≤–∞–π—Ç –±–æ—Ç–∞: https://discord.com/api/oauth2/authorize?client_id=935590256093331526&permissions=8&scope=bot', color=discord.Color.orange())
    emb.add_field(name = '–°–µ—Ä–≤–µ—Ä', value = '–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –±–æ—Ç–∞! : https://discord.gg/bzk5MRDREB')
    await ctx.send(embed = emb)
@bot.slash_command(description='–∏–Ω–≤–∞–π—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∏ –∏–Ω–≤–∞–π—Ç –±–æ—Ç–∞ –Ω–∏—á–µ–≥–æ –æ—Å–æ–±–µ–Ω–æ–≥–æ')
async def invite(ctx):
    emb = discord.Embed(title = '–ò–Ω–≤–∞–π—Ç –±–æ—Ç–∞', description='–ò–Ω–≤–∞–π—Ç –±–æ—Ç–∞: https://discord.com/api/oauth2/authorize?client_id=935590256093331526&permissions=8&scope=bot', color=discord.Color.orange())
    emb.add_field(name = '–°–µ—Ä–≤–µ—Ä', value = '–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –±–æ—Ç–∞! : https://discord.gg/bzk5MRDREB')
    await ctx.response.send_message(embed = emb)
@bot.command(pass_context=False)
async def ping(ctx):
  # –í—ã–≤–æ–¥ –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ —á–∞—Ç —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã .–ø–∏–Ω–≥
  await ctx.send('–ü–∏–Ω–≥: {0}'.format(bot.latency)) 
@bot.slash_command(pass_context=False)
async def ping(ctx):
  # –í—ã–≤–æ–¥ –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ —á–∞—Ç —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã .–ø–∏–Ω–≥
  await ctx.response.send_message('–ü–æ–Ω–≥! \n–ü–∏–Ω–≥: {0}'.format(bot.latency)) 
@bot.group(invoke_without_command=True)
async def help(ctx):
    em = discord.Embed(title = "help", description = "–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ !help <–ö–æ–º–∞–Ω–¥–∞>")
    em.add_field(name = "–ú–æ–¥–µ—Ä–∞—Ü–∏—è!", value = "–í—ã–±–µ—Ä–µ—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ `–ú–æ–¥–µ—Ä–∞—Ü–∏—è`")
    em.add_field(name = "–í–µ—Å–µ–ª–æ–µ!", value = "–í—ã–±–µ—Ä–µ—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ `–í–µ—Å–µ–ª–æ–µ`")
    em.add_field(name = "–≠–∫–æ–Ω–æ–º–∏–∫–∞", value = "–í—ã–±–µ—Ä–µ—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ `–≠–∫–æ–Ω–æ–º–∏–∫–∞`")    



    await ctx.send(embed = em, view=Helpbl())
@bot.slash_command(description='–•–µ–ª–ø —Ö–µ–ª–ø –æ–±—ã—á–Ω—ã–π', name='help')
async def help_slash(ctx):
    ctx.send = ctx.response.send_message
    em = discord.Embed(title = "help", description = "–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ !help <–ö–æ–º–∞–Ω–¥–∞>")
    em.add_field(name = "–ú–æ–¥–µ—Ä–∞—Ü–∏—è!", value = "–í—ã–±–µ—Ä–µ—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ `–ú–æ–¥–µ—Ä–∞—Ü–∏—è`")
    em.add_field(name = "–í–µ—Å–µ–ª–æ–µ!", value = "–í—ã–±–µ—Ä–µ—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ `–í–µ—Å–µ–ª–æ–µ`")
    em.add_field(name = "–≠–∫–æ–Ω–æ–º–∏–∫–∞", value = "–í—ã–±–µ—Ä–µ—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ `–≠–∫–æ–Ω–æ–º–∏–∫–∞`")    



    await ctx.send(embed = em, view=Helpbl())
@help.command(name='mute')
async def mutehelp(ctx):
    await ctx.send(embed=discord.Embed(title='–ö–æ–º–∞–Ω–¥–∞ –º—å—é—Ç–∞', description='[] - –û–±—è–∑–∞—Ç–∞–ª–µ–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã , () - –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã \n !mute [—É—á–∞—Å—Ç–Ω–∏–∫] [–≤—Ä–µ–º—è] (–ø—Ä–∏—á–∏–Ω–∞)'))
@help.command(name='ban')
async def banan(ctx):
    await ctx.send(embed=discord.Embed(title='–ö–æ–º–∞–Ω–¥–∞ –±–∞–Ω–∞', description='[] - –û–±—è–∑–∞—Ç–∞–ª–µ–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã , () - –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã \n !ban [—É—á–∞—Å—Ç–Ω–∏–∫] [–≤—Ä–µ–º—è] (–ø—Ä–∏—á–∏–Ω–∞)'))
@help.command(name='ban_id')
async def banidhelp(ctx):
    await ctx.send(embed=discord.Embed(title='–ö–æ–º–∞–Ω–¥–∞ –±–∞–Ω–∞(–ø–æ –∞–π–¥–∏!)', description='[] - –û–±—è–∑–∞—Ç–∞–ª–µ–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã , () - –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã \n !ban_id [–∞–π–¥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞] [–≤—Ä–µ–º—è] (–ø—Ä–∏—á–∏–Ω–∞)'))
@help.command(name='animals')
async def animals(ctx):
    await ctx.send(embed=discord.Embed(title='–ö–æ–º–∞–Ω–¥—ã –∂–∏–≤–æ—Ç–Ω—ã—Ö', description='[] - –û–±—è–∑–∞—Ç–∞–ª–µ–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã , () - –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã \n !fox \n !cat \n !panda \n !dog'))
@help.command(name='avatars')
async def avatars(ctx):
    await ctx.send(embed=discord.Embed(title='–ö–æ–º–∞–Ω–¥—ã', description='`!blue_avatar` \n `!pink_avatar` \n `!multi_avatar` \n `!yellow_avatar` \n `!red_avatar` \n `!grey_avatar` \n `!green_avatar`'))


@bot.command()
async def fox(ctx):
    response = requests.get('https://some-random-api.ml/img/fox') # Get-–∑–∞–ø—Ä–æ—Å
    json_data = json.loads(response.text) # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON

    embed = discord.Embed(color = 0xff9900, title = '–†–∞–∑–Ω–∞—è –ª–∏—Å–∏—á–∫–∞') # –°–æ–∑–¥–∞–Ω–∏–µ Embed'a
    embed.set_image(url = json_data['link']) # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É Embed'a
    await ctx.send(embed = embed) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Embed
@bot.slash_command(description='–ö–æ–º–∞–Ω–¥–∞ –∏–∑ —Å–µ—Ä–∏–∏ —Ä–∞–Ω–¥–æ–º –∞–ø–∏')
async def fox(ctx):
    ctx.send = ctx.response.send_message
    response = requests.get('https://some-random-api.ml/img/fox') # Get-–∑–∞–ø—Ä–æ—Å
    json_data = json.loads(response.text) # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON

    embed = discord.Embed(color = 0xff9900, title = '–†–∞–∑–Ω–∞—è –ª–∏—Å–∏—á–∫–∞') # –°–æ–∑–¥–∞–Ω–∏–µ Embed'a
    embed.set_image(url = json_data['link']) # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É Embed'a
    await ctx.send(embed = embed) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Embed
@bot.command()
async def blue_avatar(ctx):
    embed = discord.Embed(title="–°–∏–Ω—è—è –∞–≤–∞—Ç–∞—Ä–∫–∞", description="–Ω–µ—Ç—É :(", color=0x00ff00) #creates embed
    file = discord.File("blue.png", filename="blue.png")
    embed.set_image(url="attachment://blue.png")
    await ctx.send(file=file, embed=embed)
@bot.slash_command(description='–°–∞–º–∞—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç —Å–∏–Ω—è—è –∞–≤–∞!')
async def blue_avatar(ctx):
    embed = discord.Embed(title="–°–∏–Ω—è—è –∞–≤–∞—Ç–∞—Ä–∫–∞", description="–Ω–µ—Ç—É :(", color=0x00ff00) #creates embed
    file = discord.File("blue.png", filename="blue.png")
    embed.set_image(url="attachment://blue.png")
    await ctx.response.send_message(file=file, embed=embed)
@bot.command()
async def yellow_avatar(ctx):
    embed = discord.Embed(title="–ñ–µ–ª—Ç–∞—è –∞–≤–∞—Ç–∞—Ä–∫–∞", description="–Ω–µ—Ç—É :(", color=0x00ff00) #creates embed
    file = discord.File("yellow.png", filename="yellow.png")
    embed.set_image(url="attachment://yellow.png")
    await ctx.send(file=file, embed=embed)
@bot.slash_command(description='–æ—Ö—Ö –∂–µ–ª—Ç–∞—è –∞–≤–∞')
async def yellow_avatar(ctx):
    embed = discord.Embed(title="–ñ–µ–ª—Ç–∞—è –∞–≤–∞—Ç–∞—Ä–∫–∞", description="–Ω–µ—Ç—É :(", color=0x00ff00) #creates embed
    file = discord.File("yellow.png", filename="yellow.png")
    embed.set_image(url="attachment://yellow.png")
    await ctx.response.send_message(file=file, embed=embed)
@bot.command()
async def multi_avatar(ctx):
    embed = discord.Embed(title="–ú—É–ª—å—Ç–∏ –∞–≤–∞—Ç–∞—Ä–∫–∞", description="–Ω–µ—Ç—É :(", color=0x00ff00) #creates embed
    file = discord.File("multi.gif", filename="multi.gif")
    embed.set_image(url="attachment://multi.gif")
    await ctx.send(file=file, embed=embed)
@bot.slash_command(description='–º—É–ª—å—Ç–∏ –∞–≤–∞')
async def multi_avatar(ctx):
    embed = discord.Embed(title="–ú—É–ª—å—Ç–∏ –∞–≤–∞—Ç–∞—Ä–∫–∞", description="–Ω–µ—Ç—É :(", color=0x00ff00) #creates embed
    file = discord.File("multi.gif", filename="multi.gif")
    embed.set_image(url="attachment://multi.gif")
    await ctx.response.send_message(file=file, embed=embed)
@bot.command()
async def red_avatar(ctx):
    embed = discord.Embed(title="–ö—Ä–∞—Å–Ω–∞—è –∞–≤–∞—Ç–∞—Ä–∫–∞", description="–Ω–µ—Ç—É :(", color=0x00ff00) #creates embed
    file = discord.File("red.png", filename="red.png")
    embed.set_image(url="attachment://red.png")
    await ctx.send(file=file, embed=embed)
@bot.slash_command(description='—Å–µ—Ä–∏—è –∞–≤—ã –¥—Å —Ç–æ–ª—å–∫–æ –∫—Ä–∞—Å–Ω–∞—è')
async def red_avatar(ctx):
    embed = discord.Embed(title="–ö—Ä–∞—Å–Ω–∞—è –∞–≤–∞—Ç–∞—Ä–∫–∞", description="–Ω–µ—Ç—É :(", color=0x00ff00) #creates embed
    file = discord.File("red.png", filename="red.png")
    embed.set_image(url="attachment://red.png")
    await ctx.response.send_message(file=file, embed=embed)
@bot.command()
async def gray_avatar(ctx):
    embed = discord.Embed(title="–°–µ—Ä–∞—è –∞–≤–∞—Ç–∞—Ä–∫–∞", description="–Ω–µ—Ç—É :(", color=0x00ff00) #creates embed
    file = discord.File("gray.png", filename="gray.png")
    embed.set_image(url="attachment://gray.png")
    await ctx.send(file=file, embed=embed)
@bot.slash_command(description='–°–µ—Ä–∞—è –∞–≤–∞ –¥—Å')
async def gray_avatar(ctx):
    embed = discord.Embed(title="–°–µ—Ä–∞—è –∞–≤–∞—Ç–∞—Ä–∫–∞", description="–Ω–µ—Ç—É :(", color=0x00ff00) #creates embed
    file = discord.File("gray.png", filename="gray.png")
    embed.set_image(url="attachment://gray.png")
    await ctx.response.send_message(file=file, embed=embed)
@bot.command()
async def green_avatar(ctx):
    embed = discord.Embed(title="–ó–µ–ª–µ–Ω–∞—è –∞–≤–∞—Ç–∞—Ä–∫–∞", description="–Ω–µ—Ç—É :(", color=0x00ff00) #creates embed
    file = discord.File("green.png", filename="green.png")
    embed.set_image(url="attachment://green.png")
    await ctx.send(file=file, embed=embed)
@bot.slash_command(description='–∑–µ–ª–µ–Ω–∞—è –∞–≤–∞')
async def green_avatar(ctx):
    embed = discord.Embed(title="–ó–µ–ª–µ–Ω–∞—è –∞–≤–∞—Ç–∞—Ä–∫–∞", description="–Ω–µ—Ç—É :(", color=0x00ff00) #creates embed
    file = discord.File("green.png", filename="green.png")
    embed.set_image(url="attachment://green.png")
    await ctx.send(file=file, embed=embed)
@bot.command()
async def pink_avatar(ctx):
    embed = discord.Embed(title="–†–æ–∑–æ–≤–∞—è –∞–≤–∞—Ç–∞—Ä–∫–∞", description="–Ω–µ—Ç—É :(", color=0x00ff00) #creates embed
    file = discord.File("pink.png", filename="pink.png")
    embed.set_image(url="attachment://pink.png")
    await ctx.send(file=file, embed=embed)
@bot.slash_command(description='—Ä–æ–∑–æ–≤–∞—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∞–≤–∞—Ç–∞—Ä–∫–∞!')
async def pink_avatar(ctx):
    embed = discord.Embed(title="–†–æ–∑–æ–≤–∞—è –∞–≤–∞—Ç–∞—Ä–∫–∞", description="–Ω–µ—Ç—É :(", color=0x00ff00) #creates embed
    file = discord.File("pink.png", filename="pink.png")
    embed.set_image(url="attachment://pink.png")
    await ctx.send(file=file, embed=embed)
@bot.command()
async def dog(ctx):
    response = requests.get('https://some-random-api.ml/img/dog') # Get-–∑–∞–ø—Ä–æ—Å
    json_data = json.loads(response.text) # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON

    embed = discord.Embed(color = 0xff9900, title = '–†–∞–∑–Ω—ã–µ —Å–æ–±–∞–∫–∏') # –°–æ–∑–¥–∞–Ω–∏–µ Embed'a
    embed.set_image(url = json_data['link']) # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É Embed'a
    await ctx.send(embed = embed) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Embed
@bot.slash_command()
async def dog(ctx):
    ctx.send = ctx.response.send_message
    response = requests.get('https://some-random-api.ml/img/dog') # Get-–∑–∞–ø—Ä–æ—Å
    json_data = json.loads(response.text) # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON

    embed = discord.Embed(color = 0xff9900, title = '–†–∞–∑–Ω—ã–µ —Å–æ–±–∞–∫–∏') # –°–æ–∑–¥–∞–Ω–∏–µ Embed'a
    embed.set_image(url = json_data['link']) # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É Embed'a
    await ctx.send(embed = embed) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Embed
@bot.command()
async def cat(ctx):
    response = requests.get('https://some-random-api.ml/img/cat') # Get-–∑–∞–ø—Ä–æ—Å
    json_data = json.loads(response.text) # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON

    embed = discord.Embed(color = 0xff9900, title = '–†–∞–∑–Ω—ã–µ –∫–æ—Ç—ã') # –°–æ–∑–¥–∞–Ω–∏–µ Embed'a
    embed.set_image(url = json_data['link']) # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É Embed'a
    await ctx.send(embed = embed) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Embed
@bot.slash_command(description='–†–∞–Ω–¥–æ–º–Ω—ã–π –∫–æ—Ç....')
async def cat(ctx):
    ctx.send = ctx.response.send_message
    response = requests.get('https://some-random-api.ml/img/cat') # Get-–∑–∞–ø—Ä–æ—Å
    json_data = json.loads(response.text) # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON

    embed = discord.Embed(color = 0xff9900, title = '–†–∞–∑–Ω—ã–µ –∫–æ—Ç—ã') # –°–æ–∑–¥–∞–Ω–∏–µ Embed'a
    embed.set_image(url = json_data['link']) # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É Embed'a
    await ctx.send(embed = embed) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Embed
@bot.command()
async def panda(ctx):
    response = requests.get('https://some-random-api.ml/img/panda') # Get-–∑–∞–ø—Ä–æ—Å
    json_data = json.loads(response.text) # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON

    embed = discord.Embed(color = 0xff9900, title = '–†–∞–∑–Ω—ã–µ –ø–∞–Ω–¥–æ—á–∫–∏') # –°–æ–∑–¥–∞–Ω–∏–µ Embed'a
    embed.set_image(url = json_data['link']) # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É Embed'a
    await ctx.send(embed = embed) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Embed
@bot.slash_command(description='–†–∞–Ω–¥–æ–º–Ω–∞—è –ø–∞–Ω–¥–∞')
async def panda(ctx):
    ctx.send = ctx.response.send_message
    response = requests.get('https://some-random-api.ml/img/panda') # Get-–∑–∞–ø—Ä–æ—Å
    json_data = json.loads(response.text) # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON

    embed = discord.Embed(color = 0xff9900, title = '–†–∞–∑–Ω—ã–µ –ø–∞–Ω–¥–æ—á–∫–∏') # –°–æ–∑–¥–∞–Ω–∏–µ Embed'a
    embed.set_image(url = json_data['link']) # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É Embed'a
    await ctx.send(embed = embed) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Embed

@bot.command()
async def meme(ctx):
    response = requests.get('https://some-random-api.ml/meme') # Get-–∑–∞–ø—Ä–æ—Å
    json_data = json.loads(response.text) # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON

    embed = discord.Embed(color = 0xff9900, title = '–ú–µ–º—ã!', description = json_data['caption']) # –°–æ–∑–¥–∞–Ω–∏–µ Embed'a
    embed.set_image(url = json_data['image']) # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É Embed'a

    await ctx.send(embed = embed) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Embed
@bot.slash_command(description='–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–º—á–∏–∫–∏ (—Å–ø–∞—Å–∏–±–æ some-random-api)')
async def meme(ctx):
    response = requests.get('https://some-random-api.ml/meme') # Get-–∑–∞–ø—Ä–æ—Å
    json_data = json.loads(response.text) # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON

    embed = discord.Embed(color = 0xff9900, title = '–ú–µ–º—ã!', description = json_data['caption']) # –°–æ–∑–¥–∞–Ω–∏–µ Embed'a
    embed.set_image(url = json_data['image']) # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É Embed'a

    await ctx.response.send_message(embed = embed) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Embed
class Music(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.command()
    async def join(self, ctx, *, channel: discord.VoiceChannel):
        """Joins a voice channel"""

        if ctx.voice_client is not None:
            return await ctx.voice_client.move_to(channel)

        await channel.connect()

    @commands.command()
    async def playnorelease(self, ctx, *, query):
        """Plays a file from the local filesystem"""

        source = discord.PCMVolumeTransformer(discord.FFmpegPCMAudio(query))
        ctx.voice_client.play(
            source, after=lambda e: print(f"Player error: {e}") if e else None
        )

        await ctx.send(f"Now playing: {query}")

    @commands.command()
    async def play(self, ctx, *, url):
        """Plays from a url (almost anything youtube_dl supports)"""
        if not url:
            await ctx.send('Need URL!')
            return
        async with ctx.typing():
            player = await YTDLSource.from_url(url, loop=self.bot.loop)
            ctx.voice_client.play(
                player, after=lambda e: print(f"Player error: {e}") if e else None
            )

        await ctx.send(f"Now playing: {player.title}")
    @commands.slash_command(description='–ò–≥—Ä–∞–µ—Ç –º—É–∑—ã–∫—É')
    async def play(self, ctx, *, url):
        """Plays from a url (almost anything youtube_dl supports)"""
        if not url:
            await ctx.response.send_message('–ù—É–∂–Ω–∞ —Å—ã–ª–ª–∫–∞!')
            return
        async with ctx.response.defer():
            player = await YTDLSource.from_url(url, loop=self.bot.loop)
            ctx.voice_client.play(
                player, after=lambda e: print(f"Player error: {e}") if e else None
            )

        await ctx.response.send_message(f"Now playing: {player.title}")
    @commands.command()
    async def stream(self, ctx, *, url):
        """Streams from a url (same as yt, but doesn't predownload)"""

        async with ctx.typing():
            player = await YTDLSource.from_url(url, loop=self.bot.loop, stream=True)
            ctx.voice_client.play(
                player, after=lambda e: print(f"Player error: {e}") if e else None
            )

        await ctx.send(f"Now playing: {player.title}")
    @commands.slash_command(description='–ò–≥—Ä–∞–µ—Ç –º—É–∑–æ–Ω –∏–∑ —Å—Ç—Ä–∏–º–∞')
    async def stream(self, ctx, *, url):
        """Streams from a url (same as yt, but doesn't predownload)"""

        async with ctx.response.defer():
            player = await YTDLSource.from_url(url, loop=self.bot.loop, stream=True)
            ctx.voice_client.play(
                player, after=lambda e: print(f"Player error: {e}") if e else None
            )

        await ctx.response.send_message(f"Now playing: {player.title}")
    @commands.command()
    async def volume(self, ctx, volume: int):
        """Changes the player's volume"""

        if ctx.voice_client is None:
            return await ctx.send("Not connected to a voice channel.")

        ctx.voice_client.source.volume = volume / 100
        await ctx.send(f"Changed volume to {volume}%")
    @commands.slash_command(description='–ò–∑–º–µ–Ω–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –º—É–∑—ã–∫–∏')
    async def volume(self, ctx, volume: int):
        """Changes the player's volume"""

        if ctx.voice_client is None:
            return await ctx.send("Not connected to a voice channel.")

        ctx.voice_client.source.volume = volume / 100
        await ctx.send(f"Changed volume to {volume}%")
    @commands.command()
    async def stop(self, ctx):
        """Stops and disconnects the bot from voice"""

        await ctx.voice_client.disconnect()
    @commands.slash_command(description='–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º—É–∑–æ–Ω–∞ ')
    async def stop(self, ctx):
        """Stops and disconnects the bot from voice"""

        await ctx.voice_client.disconnect()
    @playnorelease.before_invoke
    @play.before_invoke
    @stream.before_invoke
    async def ensure_voice(self, ctx):
        if ctx.voice_client is None:
            if ctx.author.voice:
                await ctx.author.voice.channel.connect()
            else:
                await ctx.send("You are not connected to a voice channel.")
                raise commands.CommandError("Author not connected to a voice channel.")
        elif ctx.voice_client.is_playing():
            ctx.voice_client.stop()
bot.add_cog(Music(bot))

#bot.ipc.start()
for filename in os.listdir("./cogs/"):
    if filename.endswith(".py"):
        bot.load_extension(f"cogs.{filename[:-3]}")

bot.run(settings['token']) # –û–±—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ª–æ–≤–∞—Ä—é settings —Å –∫–ª—é—á–æ–º token, –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
        
